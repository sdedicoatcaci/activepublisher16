<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
    <section name="mood.web" type="Salamander.Web.Core.MooDWebConfiguration.MooDWebConfigurationSection, Salamander.Web.Core" />
    <sectionGroup name="system.xml">
      <section name="xslt" type="System.Xml.XmlConfiguration.XsltConfigSection, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    </sectionGroup>
  </configSections>

  <!-- 
    ** MODIFICATIONS REQUIRED FOR A SECURE ENVIRONMENT **
  -->
  <!--
    * Modifications to this file *
    This web.config file is suitable for non-SSL environments
    When a solution is provisioned for SSL (at a UAT or Production phase), please ensure the appropriate SSL restrictions are applied.    
    The guidance for modifying the config for SSL are included in this file.
    Please refer to the following elements:
      <system.web><authentication><forms>
      <system.web><httpCookies>
  -->
  <!--
    * Modifications on IIS *
    Set up SSL bindings
    Require SSL if all communication must be over SSL (which is a good idea)
  -->
  <!--
    * Modifications on the Server *
    Restrict access to the server using insecure SSL protocols
    ONLY do this if YOU are responsible for the infrastructure.
    
    SSL 1.0, 2.0 and 3.0 are insecure. Connecting clients should be forced to use TLS.
    The risk can be checked for using the following analyzer tool:
    https://www.ssllabs.com/ssltest/analyze.html

    And if necessary the server can be prevented from supporting the insecure protocols by following the steps in the following link:
    https://www.digicert.com/ssl-support/iis-disabling-ssl-v3.htm
    
    All our supported browsers support TLS 1.0 or above, so disabling SSL should be safe.
    https://en.wikipedia.org/wiki/Template:TLS/SSL_support_history_of_web_browsers
  -->
  <!-- 
    ** END MODIFICATIONS REQUIRED FOR A SECURE ENVIRONMENT **
  -->
  <!-- ** Considerations for CLASSIC MODE** -->
  <!-- 
    If the MAE instance must be run on an Application Pool which is set to Classic Mode,
    various security configurations within this web.config file will not work.
    e.g. 
      Click-jacking protection (X-Frame-Options header)
      HTTP verb restriction (requestFiltering)
      Meta-Data header suppression (customHeaders)
    If the application MUST be run under Classic Mode and MUST be secure please seek advice EARLY
    -->
  
  
  <!-- Definition and usage of mood.web
  // The entirety, and any subelement of mood.web may be excluded, in which case default values for the ommitted portion will be used
  -->
  <mood.web>
    <!--    
    <security showInsecureCredentialWarnings="true"> 
      // security.showInsecureCredentialWarnings allows the prevention of warning messages to the user if they are about to send passwords of a non secure transport (i.e. not SSL/HTTPS)
      <browserSessionMonitor cookieName="MooDSessionMonitor" /> 
        // browserSessionMonitor.cookieName allows overriding of the MooDSessionMonitor cookie, which is used to track browser session end. default="MooDSessionMonitor"
      <sensitiveDataFields passwordAllowAutoComplete="false" />
        // sensitiveDataFields.passwordAllowAutoComplete allows overriding of default behaviour which sets attribute autocomplete='on' on all inputs of type 'password'
      <CSRF enabled="true" secureOnly="true"> // CSRF provides config for Cross-Site-Request-Forgery (a.k.a. XSRF) protection. 
        // CSRF.enabled allows the entire CSRF mechanism to be enabled or disabled. default="true"
        // CSRF.secureOnly indicates whether CSRF protection will only be appiled when the site is being reached using HTTPS. default="true"
        <managedMessage value="" />
          // managedMessage allows override of the message displayed on a full mood page when the CSRF validation fails. N.B. setting to "" will set a blank message. default=<NOT PRESENT>
        <fallbackMessage value="" />
          // fallbackMessage allows override of the message displayed by services or partial pages when the CSRF validation fails. N.B. setting to "" will set a blank message. default=<NOT PRESENT>
       	<cookiePath value="" />
          // cookiePath allows specification of the Path value set on CSRF protection cookies. By default (i.e. element not present in config) the cookie path will be set to the website application root. default=<NOT PRESENT>
        <cookieDomain value="" />
          // cookieDomain allows specification of the Host/Domain value set on all CSRF protection cookies. By default (i.e. element not present in config) the cookie domain will not be set. default=<NOT PRESENT>
        <transient enabled="true" setCookieExpiry="true" cookieExpiryTime="1.00:00:00" nonHttpOnlyCookieName="GuarantorCC" httpOnlyCookieName="GuarantorSC" formFieldName="GuarantorC" />
          // transient contains specification for the behaviour of the Transient Value CSRF protection mechanism
          // transient.enabled allows the Transient mechanism to be enabled or disabled. default="true"
          // transient.setCookieExpiry specifies whether the cookieExpiryTime should be set on the mechanism cookies. If "false" the cookies will have session expiry. default="true"
          // transient.cookieExpiryTime specifies the expiry time to be set on the mechanism cookies. Format "D.hh:mm:ss". default="1.00:00:00"
          // transient.nonHttpOnlyCookieName allows override of the cookie which can be read by the client. default="GuarantorCC"
          // transient.httpOnlyCookieName allows override of the cookie which cannot be read by the client. default="GuarantorSC"
          // transient.formFieldName allows override of the name (and id) of the form field which will be injected. default="GuarantorC"
        <deterministic enabled="true" setCookieExpiry="true" cookieExpiryTime="1.00:00:00" cookieName="GuarantorSR" formFieldName="GuarantorR" />
          // deterministic contains specification for the behaviour of the deterministic Value CSRF protection mechanism
          // deterministic.enabled allows the deterministic mechanism to be enabled or disabled. default="true"
          // deterministic.setCookieExpiry specifies whether the cookieExpiryTime should be set on the mechanism cookies. If "false" the cookies will have session expiry. default="true"
          // deterministic.cookieExpiryTime specifies the expiry time to be set on the mechanism cookies. Format "D.hh:mm:ss". default="1.00:00:00"
          // deterministic.cookieName allows override of the cookie. default="GuarantorSR"
          // deterministic.formFieldName allows override of the name (and id) of the form field which will be injected. default="GuarantorR"
      </CSRF>
      <sessionFixation guaranteeNewSessionIdOnLogin="true" /> // sessionFixation provides config for Session Fixation protection. 
      // guaranteeNewSessionIdOnLogin allows control over whether or not MAE will generate a new Session ID for each new login. Generating a new Session ID on login can help prevent Session Fixation attacks. default="true"
      <requestValidation>
        // Request validation can be turned off for panels and controls on a model by adding elements to this detailing the panels or controls to turn them off for
        <add controlType="TextBox" />
        // This will turn off request validation for all TextBox controls on a page, that includes the "Text Editor" panel and also text boxes that appear in popup forms or composite controls like the login panel.
        <add panelType="Text Editor" />
        // This will turn off request validation for all TextBox controls on a page from "Text Editor" panels on a model, but not those that are from composite controls or in popup forms.
        <add nodeId="B22C2DA8CA344D83BA42FE863084E1D1" />
        // This will turn off request validation for all controls for the given node specified by the id on the model.
        <add nodeLabel="DISABLE REQUEST VALIDATION" />
        // This will turn off request validation for all controls for any nodes on any models where the node label is "DISABLE REQUEST VALIDATION".
        <add fieldTypeId="DF7889D1A60E4EFFB404DCEA9C365439" />
        // This will turn off request validation for all controls set to edit the field specified by the field type id (Repository -> Manage Field Types -> Details -> Field Type ID).
        <add fieldType="String" />
        // This will turn off request validation for all controls set to edit fields of the specified field type, where field types are the simple types, String, Boolean, Whole, Fractional, Date, Time, DateTime, and the Formatted Text, Pick List, or Relationship types.
        <add controlType="TextBox" nodeLabel="DISABLE REQUEST VALIDATION" />
        // The paramters can be used in any combination to target specific controls, so for instance this will turn off request validation for all text box controls for panels that have the label "DISABLE REQUEST VALIDATION".
      </requestValidation>
    </security>
    <authentication>
      // attributes common to all authentication elements are as follows:
      // x.enabled enables authentication using the method pertinent to the element, default="false". N.B. the relevant Module must also be included in the IIS pipeline
      // x.identityAuthenticationType is the name given to the authentication type for the authenticated identity created for the user, default value is specific to each element
      // x.requireSSL specifies whether an SSL connection is required for the authentication method, default="false"
      // x.identifyValidUsersOnly specifies whether a authenticated identity should only be created for valid users of MooD Active Enterprise, default="true"
      // x.identifyAlways specifies whether an authenticated identity should always be created even if no valid user is identified from the value(s) given, default="false"
      // x.identityOverride specifies whether an authenticated identity should be created even if another authenticated identity exists, default="true"
      <certificate enabled="false" fields="CN,cn" identityAuthenticationType="CertificateAuthenticationModule" requireSSL="false" identifyValidUsersOnly="true" identifyAlways="false" identityOverride="true" />
        // If certificate authentication is enabled, ensure that the CertificateAuthenticationModule is added in the <system.web><httpModules> and <system.webServer><modules> listings.
        // certificate.enabled enables authentication using a certificate, the module can also be enabled by setting "Active Publish Settings"->"Security"->"Authentication Mode" to either "Certificate" or "Certificate With Fallback", default="false"
        // certificate.fields identifies a prioritised, case sensitive, comma separated set of fields to use from the certificate to identify the user, default="CN,cn"
        // certificate.identityAuthenticationType default="CertificateAuthenticationModule"
      <serverVariables enabled="false" variableNames="LOGON_USER" identityAuthenticationType="ServerVariablesAuthenticationModule" requireSSL="false" identifyValidUsersOnly="true" identifyAlways="false" identityOverride="true" />
        // If server variables authentication is enabled, ensure that the ServerVariablesAuthenticationModule is added in the <system.web><httpModules> and <system.webServer><modules> listings.
        // serverVariables.enabled enables authentication using Server Variables
        // serverVariables.variableNames identifies a prioritised, case sensitive, comma separated set of variable names defining in which serverVariables to check for an Identity name, default="LOGON_USER" which is set by Windows Authentication
        // serverVariables.identityAuthenticationType, default="ServerVariablesAuthenticationModule"
      <headers enabled="false" fields="CN,cn" identityAuthenticationType="HeadersAuthenticationModule" requireSSL="false" identifyValidUsersOnly="true" identifyAlways="false" identityOverride="true" />
        // If headers authentication is enabled, ensure that the HeadersAuthenticationModule is added in the <system.web><httpModules> and <system.webServer><modules> listings.
        // headers.enabled enables authentication using Header values
        // headers.fields identifies a prioritised, case sensitive, comma separated set of header names defining in which Headrs to check for an Identity name, default="CN,cn"
        // headers.identityAuthenticationType, default="HeadersAuthenticationModule"
    </authentication>
    -->
  </mood.web>
  
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.6" />
      </system.Web>
  -->
  <system.web>
    <!--  DYNAMIC DEBUG COMPILATION
          Set compilation debug="true" to enable ASPX debugging.  Otherwise, setting this value to
          false will improve runtime performance of this application. 
          Set compilation debug="true" to insert debugging symbols (.pdb information)
          into the compiled page. Because this creates a larger file that executes
          more slowly, you should set this value to true only when debugging and to
          false at all other times. For more information, refer to the documentation about
          debugging ASP.NET files.
    -->
    <compilation defaultLanguage="c#" debug="false" targetFramework="4.6"/>
    <!-- By default ASP.NET will try to use up to 90% of the machines available memory. This is not ideal if running other applications 
         on the web server such as a SQL Server instance. 
    -->
    <caching>
      <cache disableMemoryCollection="false" disableExpiration="false" privateBytesLimit="0" percentagePhysicalMemoryUsedLimit="80" privateBytesPollTime="00:02:00"/>
    </caching>
    <pages buffer="true" enableSessionState="true" enableViewState="true" enableViewStateMac="true" autoEventWireup="false" controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID">
      <tagMapping>
        <add tagType="System.Web.UI.ScriptManager, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" mappedTagType="Salamander.Web.Core.Controls.LoggingScriptManager, Salamander.Web.Core"/>
      </tagMapping>
      <!-- Register core Salamander controls for all pages in the application -->
      <controls>
        <add assembly="Salamander.Web.Util" namespace="Salamander.Web.Util.Controls" tagPrefix="swu"/>
        <add assembly="Salamander.Web.Core" namespace="Salamander.Web.Core.Controls" tagPrefix="swc"/>
      </controls>
    </pages>
    <!--  CUSTOM ERROR MESSAGES
          Set customErrors mode="On" or "RemoteOnly" to enable custom error messages, "Off" to disable. 
          Add <error> tags for each of the errors you want to handle.

          "On" Always display custom (friendly) messages.
          "Off" Always display detailed ASP.NET error information.
          "RemoteOnly" Display custom (friendly) messages only to users not running 
           on the local Web server. This setting is recommended for security purposes, so 
           that you do not display application detail information to remote clients.
    -->
    <customErrors mode="RemoteOnly" defaultRedirect="~/Error.html" redirectMode="ResponseRewrite" />
    <!--  AUTHENTICATION 
          This section sets the authentication policies of the application. Possible modes are "Windows", 
          "Forms", "Passport" and "None"

          "None" No authentication is performed. 
          "Windows" IIS performs authentication (Basic, Digest, or Integrated Windows) according to 
           its settings for the application. Anonymous access must be disabled in IIS. 
          "Forms" You provide a custom form (Web page) for users to enter their credentials, and then 
           you authenticate them in your application. A user credential token is stored in a cookie.
          "Passport" Authentication is performed via a centralized authentication service provided
           by Microsoft that offers a single logon and core profile services for member sites.
    -->
    <authentication mode="Forms">
      <!-- The forms authentication element
        The Forms Authentication cookie is always HttpOnly
        ** The following step is ABSOLUTELY REQUIRED for a secure environment **
        For an SSL environment, add the attribute:
          requireSSL="true"
          
        Note that once requireSSL is set an Auth cookie will not be created for a non-HTTPS request
        This can be a problem if the environment has e.g. SSL to a Web Application Firewall and then HTTP to the web server, 
          in this circumstance we cannot set requireSSL as then Auth cookies wil not be written, but without it the auth cookies will not have Secure set.
      -->
      <forms timeout="20" name="ActivePublisher16" loginUrl="Login.aspx" protection="All"/>
    </authentication>
    <!--  AUTHORIZATION 
          This section sets the authorization policies of the application. You can allow or deny access
          to application resources by user or role. Wildcards: "*" mean everyone, "?" means anonymous 
          (unauthenticated) users.
    -->
    <authorization>
      <!--<allow users="*" />-->
      <!-- Allow all users -->
      <!--  <allow     users="[comma separated list of users]"
                         roles="[comma separated list of roles]"/>
              <deny      users="[comma separated list of users]"
                         roles="[comma separated list of roles]"/>
        -->
      <!-- Allow all users access to the files, see <location> sections below for denied access to 
      specific resources. This is so the MAE control renderer can have access to the resources it requires 
      to render the pages.
      -->
      <allow users="*"/>
    </authorization>
    <!--  APPLICATION-LEVEL TRACE LOGGING
          Application-level tracing enables trace log output for every page within an application. 
          Set trace enabled="true" to enable application trace logging.  If pageOutput="true", the
          trace information will be displayed at the bottom of each page.  Otherwise, you can view the 
          application trace log by browsing the "trace.axd" page from your web application
          root. 
    -->
    <trace enabled="false" requestLimit="10" pageOutput="false" traceMode="SortByTime" localOnly="true"/>
    <!--  SESSION STATE SETTINGS
          By default ASP.NET uses cookies to identify which requests belong to a particular session. 
          If cookies are not available, a session can be tracked by adding a session identifier to the URL. 
          To disable cookies, set sessionState cookieless="true".
    -->
    <sessionState mode="InProc" stateConnectionString="tcpip=127.0.0.1:42424" sqlConnectionString="data source=127.0.0.1;Trusted_Connection=yes" cookieless="false" timeout="20" regenerateExpiredSessionId="true"/>
    <!--  GLOBALIZATION
          This section sets the globalization settings of the application. 
    -->
    <globalization requestEncoding="utf-8" responseEncoding="utf-8"/>
    <xhtmlConformance mode="Strict"/>
    <!-- Enabled AspCompat for all pages -->

    <httpRuntime apartmentThreading="true" executionTimeout="300" enableVersionHeader="false" requestValidationMode="4.5"/>
    
    <!-- LARGE FILES OR REQUESTS 
    To support larger file uploads, add maxRequestLength attribute (in Kilobytes) to httpRuntime. 
    https://docs.microsoft.com/en-us/dotnet/api/system.web.configuration.httpruntimesection.maxrequestlength?view=netframework-4.6
    The default value is 4096KB i.e. 4MB
    Note: Larger values can assist Denial of service attacks.
    E.g. 50MB
      maxRequestLength="51200"
    
    See also requestLimits/maxAllowedContentLength, which must be a larger byte value than httpRuntime/maxRequestLength
    If you get the message "The page was not displayed because the request entity is too large" 
    - change ApplicationHost.config's uploadReadAheadSize (system.webServer/serverRuntime), via the IIS Management console.
    -->
    
    <!-- Disable access to information otherwise available on services by appending "?wsdl"
         cf. http://blog.jonathanroussel.com/2007/04/disabling-aspnet-wsdl-command.html
    -->
    <!-- httpCookies specifies the default restrictions applied to cookies issued by the site. --> 
    <!-- <httpCookies requireSSL="true" httpOnlyCookies="true"/> --> <!-- For SSL environments -->
    <httpCookies requireSSL="false" httpOnlyCookies="true"/> <!-- dev and other non -SSL environments -->
  
    <webServices>
      <protocols>
        <remove name="Documentation"/>
      </protocols>
    </webServices>
    <httpModules>
      <remove name="ScriptModule-4.0"/>
      <add name="CertificateAuthenticationModule" type="Salamander.Web.Core.CertificateAuthenticationModule, Salamander.Web.Core"/>
      <!-- <add name="ServerVariablesAuthenticationModule" type="Salamander.Web.Core.ServerVariablesAuthenticationModule, Salamander.Web.Core"/> --><!-- Include the ServerVariablesAuthenticationModule only if needed -->
      <!-- <add name="HeadersAuthenticationModule" type="Salamander.Web.Core.HeadersAuthenticationModule, Salamander.Web.Core"/> --><!-- Include the HeadersAuthenticationModule only if needed -->
      <add name="PageFactoryModule" type="Salamander.Web.Core.PageFactoryModule, Salamander.Web.Core"/>
      <add name="RequestLoggingModule" type="Salamander.Web.Core.RequestLoggingModule, Salamander.Web.Core"/>
      <add name="RequestLifetimeModule" type="Salamander.Web.Core.RequestLifetimeModule, Salamander.Web.Core"/>
      <add name="CacheGenerationProviderModule" type="Salamander.Web.Core.CacheGenerationProviderModule, Salamander.Web.Core"/>
      <add name="AspCompatScriptModule" type="Salamander.Web.Util.Modules.AspCompatScriptModule, Salamander.Web.Util"/>
    </httpModules>
    <httpHandlers>
      <remove verb="*" path="*.asmx"/>
      <add verb="*" path="*.asmx" type="Salamander.Web.Util.Handlers.AspCompatWebServiceHandler, Salamander.Web.Util" validate="false"/>      
      <add verb="GET" path="Model.axd" type="Salamander.Web.Core.Handlers.ModelHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="Matrix.axd" type="Salamander.Web.Core.Handlers.MatrixHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="Node.axd" type="Salamander.Web.Core.Handlers.NodeHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="Stylesheet.axd" type="Salamander.Web.Core.Handlers.StylesheetHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="ElementIcon.axd" type="Salamander.Web.Core.Handlers.ElementIconHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="PanelGraphic.axd" type="Salamander.Web.Core.Handlers.PanelGraphicHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="*KnowledgeResource.aspx" type="Salamander.Web.Core.Handlers.KnowledgeResourceHandlerFactory, Salamander.Web.Core"/>
      <add verb="GET" path="Visualization.axd" type="Salamander.Web.Core.Handlers.VisualizationHandlerFactory, Salamander.Web.Core"/>
      <add verb="*" path="ChartImg.axd" type="System.Web.UI.DataVisualization.Charting.ChartHttpHandler, System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" validate="false"/>
      <add verb="GET,POST" path="Image.axd" type="Salamander.Web.Core.Handlers.ImageHandlerFactory, Salamander.Web.Core" validate="false" />
    </httpHandlers>
  </system.web>
  <system.web.extensions>
    <scripting>
      <webServices>
        <jsonSerialization maxJsonLength="500000"/>
      </webServices>
    </scripting>
  </system.web.extensions>
  <!-- IIS 7.0 Configuration -->
  <system.webServer>
    <!-- Turn off validation to avoid errors caused by presence of <httpHandlers> in <system.web> -->
    <validation validateIntegratedModeConfiguration="false"/>
    <modules>
      <remove name="ScriptModule"/>
      <remove name="ScriptModule-4.0"/>
      <add name="CertificateAuthenticationModule" preCondition="integratedMode" type="Salamander.Web.Core.CertificateAuthenticationModule, Salamander.Web.Core"/>
      <!-- <add name="ServerVariablesAuthenticationModule" preCondition="integratedMode" type="Salamander.Web.Core.ServerVariablesAuthenticationModule, Salamander.Web.Core"/> --><!-- Include the ServerVariablesAuthenticationModule only if needed -->
      <!-- <add name="HeadersAuthenticationModule" preCondition="integratedMode" type="Salamander.Web.Core.HeadersAuthenticationModule, Salamander.Web.Core"/> --><!-- Include the HeadersAuthenticationModule only if needed -->
      <add name="PageFactoryModule" preCondition="integratedMode" type="Salamander.Web.Core.PageFactoryModule, Salamander.Web.Core"/>
      <add name="RequestLoggingModule" preCondition="integratedMode" type="Salamander.Web.Core.RequestLoggingModule, Salamander.Web.Core"/>
      <add name="RequestLifetimeModule" preCondition="integratedMode" type="Salamander.Web.Core.RequestLifetimeModule, Salamander.Web.Core"/>
      <add name="CacheGenerationProviderModule" preCondition="integratedMode" type="Salamander.Web.Core.CacheGenerationProviderModule, Salamander.Web.Core"/>
      <add name="AspCompatScriptModule" preCondition="integratedMode" type="Salamander.Web.Util.Modules.AspCompatScriptModule, Salamander.Web.Util"/>
    </modules>
    <handlers>
      <remove name="WebServiceHandlerFactory-Integrated"/>
      <remove name="WebServiceHandlerFactory-Integrated-2.0"/>
      <remove name="WebServiceHandlerFactory-Integrated-4.0"/>
      <remove name="WebServiceHandlerFactory-ISAPI-2.0"/>
      <remove name="WebServiceHandlerFactory-ISAPI-2.0-64"/>
      <remove name="WebServiceHandlerFactory-ISAPI-4.0_32bit"/>
      <remove name="WebServiceHandlerFactory-ISAPI-4.0_64bit"/>
      <add name="AspCompatWebServiceHandler" preCondition="integratedMode" verb="*" path="*.asmx" type="Salamander.Web.Util.Handlers.AspCompatWebServiceHandler" resourceType="Unspecified"/>
      <add name="ScriptResourceHandler" preCondition="integratedMode" verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" resourceType="Unspecified"/>
      <add name="ModelHandler" preCondition="integratedMode" verb="GET" path="Model.axd" type="Salamander.Web.Core.Handlers.ModelHandlerFactory" resourceType="Unspecified"/>
      <add name="MatrixHandler" preCondition="integratedMode" verb="GET" path="Matrix.axd" type="Salamander.Web.Core.Handlers.MatrixHandlerFactory" resourceType="Unspecified"/>
      <add name="NodeHandler" preCondition="integratedMode" verb="GET" path="Node.axd" type="Salamander.Web.Core.Handlers.NodeHandlerFactory" resourceType="Unspecified"/>
      <add name="StylesheetHandler" preCondition="integratedMode" verb="GET" path="Stylesheet.axd" type="Salamander.Web.Core.Handlers.StylesheetHandlerFactory" resourceType="Unspecified" />
      <add name="ElementIconHandler" preCondition="integratedMode" verb="GET" path="ElementIcon.axd" type="Salamander.Web.Core.Handlers.ElementIconHandlerFactory" resourceType="Unspecified"/>
      <add name="PanelGraphicHandler" preCondition="integratedMode" verb="GET" path="PanelGraphic.axd" type="Salamander.Web.Core.Handlers.PanelGraphicHandlerFactory" resourceType="Unspecified"/>
      <add name="KnowledgeResourceHandler" preCondition="integratedMode" verb="GET" path="*KnowledgeResource.aspx" type="Salamander.Web.Core.Handlers.KnowledgeResourceHandlerFactory" resourceType="Unspecified"/>
      <add name="VisualizationHandler" preCondition="integratedMode" verb="GET" path="Visualization.axd" type="Salamander.Web.Core.Handlers.VisualizationHandlerFactory" resourceType="Unspecified"/>
      <add name="ChartHttpHandler" preCondition="integratedMode" verb="*" path="ChartImg.axd" type="System.Web.UI.DataVisualization.Charting.ChartHttpHandler, System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" resourceType="Unspecified"/>
      <add name="ImageHandler" preCondition="integratedMode" verb="GET,POST" path="Image.axd" type="Salamander.Web.Core.Handlers.ImageHandlerFactory, Salamander.Web.Core" resourceType="Unspecified" />
    </handlers>
    <staticContent>
      <remove fileExtension=".json" />
      <mimeMap fileExtension=".json" mimeType="application/json"/>
    </staticContent>
    <httpProtocol>
      <customHeaders>
        <!-- X-Frame-Options = SAMEORIGIN protects against click-jacking attacks by preventing the page from being included in an iFrame. -->
        <add name="X-Frame-Options" value="SAMEORIGIN"/>
        <!-- X-Powered-By reveals information about the IIS instance -->
        <remove name="X-Powered-By" />
        <!-- Content-Security-Policy provides various restrictions on what connections and activities a page may make (but is not supported on IE) 
          see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
          modify as necessary to tighten or loosen the security -->
        <!-- the following version is the tightest possible to allow the majority of panels to function -->
        <!--
        <add name="Content-Security-Policy" value="default-src 'self'; img-src 'self' data: blob:; object-src 'none'; media-src 'none'; manifest-src 'none'; form-action 'self'; frame-ancestors 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" />
        -->
        <!-- the following version is as above, but also includes the directives necessary for GoogleMaps and OpenStreetMaps to function -->
        <add name="Content-Security-Policy" value="default-src 'self'; img-src 'self' *.googleapis.com maps.gstatic.com *.ggpht.com *.openstreetmap.org *.opencyclemap.org data: blob:; object-src 'none'; media-src 'none'; manifest-src 'none'; form-action 'self'; frame-ancestors 'self'; script-src 'self' www.google.com www.gstatic.com maps.googleapis.com 'unsafe-inline' 'unsafe-eval'; style-src 'self' fonts.googleapis.com 'unsafe-inline'; font-src 'self' fonts.gstatic.com;" />

        <!-- Referrer-Policy "no-referrer" prevents requests from sending the referrer, it may need to be modified to enable CORS or for certain CSRF mitigations in complex deployments -->
        <add name="Referrer-Policy" value="no-referrer" />
        <!-- X-Content-Type-Options "nosniff" instructs the browser not to insecurely estimate mime-types when a Content-Type is not provided -->
        <add name="X-Content-Type-Options" value="nosniff" />
        <!-- X-XSS-Protection instructs inbuilt browser XSS protection to be enabled and to block violating activity. N.B. this is not supported by Edge and Chrome and is considered legacy -->
        <add name="X-XSS-Protection" value="1; mode=block" />
      </customHeaders>
    </httpProtocol>
    <httpErrors errorMode="DetailedLocalOnly">
      <!-- The path value has to be a server relative URL, not an application or site relative URL.
           The example is setup for Active Publisher being at the root of the server:
      <remove statusCode="401"/>
      <error statusCode="401" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="403"/>
      <error statusCode="403" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="404"/>
      <error statusCode="404" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="405"/>
      <error statusCode="405" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="406"/>
      <error statusCode="406" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="412"/>
      <error statusCode="412" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="500"/>
      <error statusCode="500" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="501"/>
      <error statusCode="501" path="/Error.aspx" responseMode="ExecuteURL"/>
      <remove statusCode="502"/>
      <error statusCode="502" path="/Error.aspx" responseMode="ExecuteURL"/>
      -->
    </httpErrors>
    <security>
      <!-- 
        Request filtering is a security measure to prevent exposure of vulnerabilities involving attacks on the application using unanticipated HTTP verbs/methods
        For requestFiltering see 
        https://www.iis.net/configreference/system.webserver/security/requestfiltering/verbs 
        http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
        Any request to the site using a non-allowed verb will receive a 404 response
      -->
      <!--
      When running on IIS10 or above please add the removeServerHeader attribute
      thus:
      
      <requestFiltering removeServerHeader="true">

      -->
      <requestFiltering>
        <verbs applyToWebDAV="true" allowUnlisted="false">
          <clear/>
          <add verb="GET" allowed="true" />
          <add verb="POST" allowed="true" />
          <add verb="OPTIONS" allowed="true" />
          <add verb="CONNECT" allowed="true" />
        </verbs>
        
        <!-- LARGE FILES OR REQUESTS
        Default maximum http content length, should be greater than maxRequestLength.
        The default value is 30000000, which is approximately 28.6MB.
        https://docs.microsoft.com/en-us/iis/configuration/system.webServer/security/requestFiltering/requestLimits/
        Number is in bytes. e.g. 60MB        
          <requestLimits maxAllowedContentLength="62914560" />
        -->
        
      </requestFiltering>
    </security>
    <!--
      Compression for dynamic and static content can be turned on using the following element, but:
      https://support.microsoft.com/en-gb/help/2877816/vary-header-is-overwritten-as-accept-encoding-after-you-enable-dynamic
      When you enable dynamic content compression on a computer that is running Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012,
      Windows 7 Service Pack 1 (SP1), or Windows Server 2008 R2 SP1, a Vary header is overwritten as "Accept-Encoding."
    -->
    <!-- <urlCompression doStaticCompression="true" doDynamicCompression="true" dynamicCompressionBeforeCache="false" /> -->
  </system.webServer>
  <!-- Custom settings for Active Publisher which may be set using ConfigureActivePublisher.exe located in your bin directory of the web site -->
  <appSettings file="ActivePublisher.config">
    <!-- Used by the Microsoft Charts as by default the storage is on disk, we don't want this and other behaviour, so use our custom handler -->
    <add key="ChartImageHandler" value="storage=memory;Timeout=60;Url=~/temp/"/>
    <add key="UseCompatibleTypeConverterBehavior" value="true" />
    <!--<add key="ServeFullDXBundle" value="true" />-->
  </appSettings>
  <unity>
    <typeAliases>
      <!-- Lifetime manager types -->
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
      <typeAlias alias="perThread" type="Microsoft.Practices.Unity.PerThreadLifetimeManager, Microsoft.Practices.Unity"/>
      <typeAlias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity"/>
      <typeAlias alias="request" type="Salamander.Web.Core.RequestLifetimeManager, Salamander.Web.Core"/>
      <typeAlias alias="session" type="Salamander.Web.Core.SessionLifetimeManager, Salamander.Web.Core"/>
    </typeAliases>
    <containers>
      <!-- Override or add new services here -->
      <container>
        <types>
          <!-- Factories -->
          <type type="Salamander.Web.Core.Interfaces.IWebPanelFactory, Salamander.Web.Core" mapTo="Salamander.PerformanceActivation.Common.CommonClasses.Web.WebPanelFactory, Salamander.PerformanceActivation.Core"/>
          <type type="Salamander.Web.Core.Interfaces.ISchedulerFactory, Salamander.Web.Core" mapTo="Salamander.BusinessActivation.BIE.CachePA.SchedulerProxyFactory, Salamander.IScheduler"/>
          <!-- Caching -->
          <type type="Salamander.Web.Core.Interfaces.ICacheManager, Salamander.Web.Core" mapTo="Salamander.ActivePublisher.Core.CoreCacheManager, Salamander.ActivePublisher.Core">
            <lifetime type="singleton"/>
          </type>
          <type type="Salamander.Web.Core.Interfaces.IElementCache, Salamander.Web.Core" mapTo="Salamander.Web.Core.ElementCache, Salamander.Web.Core">
            <lifetime type="request"/>
          </type>
          <type type="Salamander.Web.Core.Interfaces.ICacheGenerationProvider, Salamander.Web.Core" mapTo="Salamander.Web.Core.CacheGenerationProvider, Salamander.Web.Core">
            <lifetime type="request"/>
          </type>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.ModelCacheManager, Salamander.Web.Core" name="model"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.PageCacheManager, Salamander.Web.Core" name="page"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.InteractiveModelCacheManager, Salamander.Web.Core" name="interactive"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.NodeViewActivatorCacheManager, Salamander.Web.Core" name="nodeview"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.NodeImageCacheManager, Salamander.Web.Core" name="nodeimage"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.SessionCacheManager, Salamander.Web.Core" name="session"/>
          <type type="Salamander.Web.Core.Interfaces.ITypeCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.StylesheetCacheManager, Salamander.Web.Core" name="stylesheet"/>
          <type type="Salamander.Web.Core.Interfaces.IPermissionsCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.ModelPermissionsCacheManager, Salamander.Web.Core" name="modelpermissions"/>
          <type type="Salamander.Web.Core.Interfaces.IPermissionsCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.ElementPermissionsCacheManager, Salamander.Web.Core" name="elementpermissions"/>
          <type type="Salamander.Web.Core.Interfaces.IPermissionsCacheManager, Salamander.Web.Core" mapTo="Salamander.Web.Core.FieldPermissionsCacheManager, Salamander.Web.Core" name="fieldpermissions"/>
        </types>
      </container>
    </containers>
  </unity>

  <runtime>
    <legacyUnhandledExceptionPolicy enabled="1"/>
  </runtime>
  
  <!-- http://support.microsoft.com/kb/2828841 https://connect.microsoft.com/VisualStudio/feedback/details/795356/system-xml-xsl-xsltexception-xslt-compile-error-after-installing-windows-update-kb2844286 -->
  <system.xml>
    <xslt limitXPathComplexity="false"/>
  </system.xml>

  <system.diagnostics>
    <switches>
      <!-- What level of trace should be added to the event log? Error/Warning(default)/Info/Verbose -->
      <add name="TraceToEventLog" value="Warning" />

      <!-- Should the trace be output to the file system? false(default)/true" /> -->
      <!-- <add name="TraceToFile" value="false" /> -->

      <!-- Where should the trace be output in the file system? empty(default)/directory location -->
      <!-- <add name="TracePath" value="" /> -->

      <!-- Should verbose trace be output? false(default)/true -->
      <!-- <add name="TraceVerbose" value="false" /> -->
    </switches>
  </system.diagnostics>
</configuration>